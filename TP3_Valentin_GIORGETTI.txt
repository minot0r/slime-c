Premiers pas en plpgSQL
1. Écrire une fonction sans argument qui souhaite le bonjour à l’utilisateur connecté.
CREATE OR REPLACE FUNCTION bonjour() RETURNS void AS $$
BEGIN
RAISE NOTICE 'Bonjour %, quelle belle journée n’est-ce pas ?', current_user;
END;
$$ LANGUAGE plpgsql;

2. Écrire une fonction de comparaison de deux entiers passés en argument d’entrée. Cette fonction,
nommée, affichera en information la valeur de chaque entier et retournera un record dont le premier
champ contiendra ‘min=valeur_min’ et le second ‘max=valeur_max’. 
CREATE OR REPLACE FUNCTION compar(a integer, b integer) RETURNS record AS $$
DECLARE
rec record;
BEGIN
RAISE NOTICE 'a=%, b=%', a, b;
IF a < b THEN
rec := row('min='||a, 'max='||b);
ELSIF a > b THEN
rec := row('min='||b, 'max='||a);
ELSE
rec := row('equal='||a);
END IF;
RETURN rec;
END;
$$ LANGUAGE plpgsql;



Restons en SQL « pure » pour l’instant !

3. Combien d’avatars possède chacun des visiteurs ? Afficher l’id_visiteur et le nombre.
SELECT id_visiteur, count(id_visiteur) FROM avatar GROUP BY id_visiteur;

Créez la fonction SQL f_nb_avatar qui permet grace à l’id_visiteur de renvoyer le nombre
d’avatars. Combien d’avatar possède le visiteur 3 ?

CREATE OR REPLACE FUNCTION f_nb_avatar(id_visiteur integer) RETURNS bigint AS
'SELECT count(id_visiteur) FROM avatar WHERE id_visiteur = $1'
LANGUAGE SQL;

SELECT f_nb_avatar(3);

5. Quelle race possède plus de 3 avatars ? Afficher l’id_race et le nombre d’avatars.
SELECT id_race, COUNT(*) FROM avatar GROUP BY id_race HAVING COUNT(*) >= 3;

6. Créez la fonction SQL f_nb_race_avatar qui permet de savoir quelle race d’avatar (nom) possède
plus de X avatars, X étant passé en paramètre. Attention, la fonction doit permettre l’affichage de
plusieurs races… Grâce à cette fonction, indiquez quelle race possède plus de 3 avatars (inclus).

CREATE OR REPLACE FUNCTION f_nb_race_avatar(x integer) RETURNS SETOF varchar(20) AS
'SELECT race.nom_race FROM avatar, race 
WHERE avatar.id_race = race.id_race 
GROUP BY race.nom_race 
HAVING COUNT(avatar.id_race) >= $1'
LANGUAGE SQL;

7. Qui a acheté le plus grand nombre d’objets ? Afficher l’id_visiteur et le nombre d’objets.
SELECT id_visiteur, SUM(nb_achat) FROM stock GROUP BY id_visiteur ORDER BY SUM(nb_achat) DESC LIMIT 1;

8. Modifiez la table visiteur afin que l’on stocke le nom et le prénom du visiteur.
ALTER TABLE visiteur ADD COLUMN nom varchar(20);
ALTER TABLE visiteur ADD COLUMN prenom varchar(20);

9. Créez la fonction SQL f_maj_nom_prenom qui permet de mettre à jour le nom et le prénom d’un
visiteur à partir de son identifiant. Cette fonction prend en entrée : un id_visiteur, un nom et un prénom
et met à jour la bonne ligne (en fonction d’id visiteur) avec les valeurs nom et prénom.

CREATE OR REPLACE FUNCTION f_maj_nom_prenom(id_visiteur integer, nom varchar(20), prenom varchar(20)) RETURNS void AS
'UPDATE visiteur SET nom = $2, prenom = $3 WHERE id_visiteur = $1'
LANGUAGE SQL;

10. Utilisez la fonction précédente pour nommer les personnes comme indiqué ci-après :

SELECT f_maj_nom_prenom(1, 'Wood', 'Stuart');
SELECT f_maj_nom_prenom(3, 'Sirtakis', 'Ilan');
SELECT f_maj_nom_prenom(5, 'Peperoni', 'Andrew');
SELECT f_maj_nom_prenom(6, 'Martin', 'Piere');

Implémenter des fonctions en plpgsql

11. Créez la fonction f_listing qui renvoie pour un jeu donné (nom_jeu) et un utilisateur donné (login) la
liste des avatars (nom_avatar, nom_race) de ce joueur qui ont déjà engagé une partie dans ce jeu
ordonnée par highscore (du plus grand au plus petit). Conseil : N’hésitez pas à vous servir de la vue du TP
précédent. Utilisez un type de retour TABLE pour faciliter l’appel de la fonction.

CREATE OR REPLACE FUNCTION f_listing(nom_jeu varchar(20), login varchar(20)) 
RETURNS TABLE(nom_avatar varchar, nom_race varchar, highscore int) AS $$
BEGIN
RETURN QUERY SELECT v.nom_avatar, v.nom_race, v.highscore FROM vue_visiteur v
WHERE v.nom_jeu = $1 AND v.login = $2
ORDER BY v.highscore DESC;
END;
$$ LANGUAGE plpgsql;

12. Modifiez la fonction précédente. Grâce à la variable FOUND et PERFORM, affichez une information si
soit le jeu, soit la personne ne sont pas référencés dans notre base. Grâce à la variable FOUND et le
select qui renvoie les informations, indiquez également si la personne ne joue pas au jeu.

CREATE OR REPLACE FUNCTION f_listing(nom_jeu varchar(20), login varchar(20))
RETURNS TABLE(nom_avatar varchar, nom_race varchar, highscore int) AS $$
BEGIN
PERFORM * FROM jeu j WHERE j.nom_jeu = $1;
IF NOT FOUND THEN
RAISE NOTICE 'Jeu % inexistant', $1;
RETURN;
END IF;
PERFORM * FROM visiteur v WHERE v.login = $2;
IF NOT FOUND THEN
RAISE NOTICE 'Visiteur % inexistant', $2;
RETURN;
END IF;
PERFORM * FROM vue_visiteur v WHERE v.nom_jeu = $1 AND v.login = $2;
IF NOT FOUND THEN
RAISE NOTICE 'Visiteur % ne joue pas au jeu %', $2, $1;
RETURN;
END IF;
RETURN QUERY SELECT v.nom_avatar, v.nom_race, v.highscore FROM vue_visiteur v
WHERE v.nom_jeu = $1 AND v.login = $2
ORDER BY v.highscore DESC;
END;
$$ LANGUAGE plpgsql;

13. Quels sont les avatars (id_avatar) qui ont joué à des jeux de plateau *ET* des jeux de role ? 
Plateforme de jeux en ligne
Rappel du modèle relationnel
visiteur (id_visiteur, login, mdp, mail, ville)
objet (id_objet, nom_objet, prix, puissance)
stock (#id_objet, #id_visiteur, nb_achat, nb_dispo)
race (id_race, nom_race, txt_race)
avatar (id_avatar, nom_avatar, sexe, xp, code_dsc, #id_visiteur, #id_race)
jeu (id_jeu, nom_jeu, type, nb_joueur)
partie (#id_avatar, #id_jeu, role, highscore)
save (#id_avatar, #id_jeu, date_s, nb_pv, fichier)

SELECT id_avatar FROM avatar WHERE id_avatar IN (SELECT id_avatar FROM partie WHERE id_jeu IN (SELECT id_jeu FROM jeu WHERE type = 'plateau')) AND id_avatar IN (SELECT id_avatar FROM partie WHERE id_jeu IN (SELECT id_jeu FROM jeu WHERE type = 'role'));

Quels sont les noms de jeux qui ont des participants gentils et d'autres méchants? On ne veut pas afficher plusieurs fois le même jeu...

SELECT DISTINCT nom_jeu FROM partie, jeu WHERE partie.id_jeu = jeu.id_jeu AND role = 'gentil' AND partie.id_jeu IN (SELECT id_jeu FROM partie WHERE role = 'mechant');

Afficher les login des visiteurs ainsi que le nom et le prix de leurs objets achetés qui ont une puissance de 90 ou 100 ou 150.

SELECT login, nom_objet, prix FROM visiteur, objet, stock WHERE visiteur.id_visiteur = stock.id_visiteur AND objet.id_objet = stock.id_objet AND puissance IN (90, 100, 150);

Combien d'objets a acheté le visiteur Elijah ?

SELECT COUNT(*) FROM stock WHERE id_visiteur = (SELECT id_visiteur FROM visiteur WHERE login = 'Elijah');

PROPOSEZ 2 SOLUTIONS : avec et sans jointure. Quels sont les jeu (nom) pour lesquels un avatar a obtenu un highscore supérieur à 500 ? Chaque jeu ne doit apparaître qu’une seule fois.
SELECT nom_jeu FROM partie, jeu WHERE partie.id_jeu = jeu.id_jeu AND highscore > 500 GROUP BY nom_jeu;
SELECT nom_jeu FROM jeu WHERE (SELECT highscore FROM partie WHERE partie.id_jeu = jeu.id_jeu ORDER BY highscore DESC LIMIT 1) > 500 GROUP BY nom_jeu;

Combien y a-t-il de parties jouées par jeu (affichage nom_jeu et nombre participant) ?
SELECT nom_jeu, COUNT(*) as "participants" FROM partie, jeu WHERE partie.id_jeu = jeu.id_jeu GROUP BY nom_jeu;

Quel jeu (id_jeu) ont un nombre de parties supérieur à 3 ?
SELECT id_jeu FROM partie GROUP BY id_jeu HAVING COUNT(*) > 3;

Créer la fonction *SQL* qui permet de lister pour un jeu donné (nom) la liste des races (nom) qui participent à ce jeu. Quels sont les races qui participent au Solitaire?

CREATE OR REPLACE FUNCTION list_races_in_game(nom_jeu varchar)
RETURNS SETOF varchar AS '
SELECT DISTINCT nom_race FROM partie, jeu, race, avatar
WHERE partie.id_jeu = jeu.id_jeu
AND partie.id_avatar = avatar.id_avatar
AND avatar.id_race = race.id_race
AND jeu.nom_jeu = $1;
' LANGUAGE SQL;